package test;

import java.util.concurrent.atomic.AtomicBoolean;

public class DiningPhilosophers {
	 
    public static void main(String[] args) throws Exception {
 
        final Philosopher[] philosophers = new Philosopher[5]; // 5 triet gia
        Object[] forks = new Object[philosophers.length]; // source
        for (int i = 0; i < forks.length; i++) {
            forks[i] = new Object();//tao 5 cai dua
        }
 
//        for (int i = 0; i < philosophers.length; i++) {//bat dau an
//            Object leftFork = forks[i]; // dua trai
//            Object rightFork = forks[(i + 1) % forks.length]; // dua phai
//            philosophers[i] = new Philosopher(leftFork, rightFork);
//            Thread t 
//              = new Thread(philosophers[i], "Philosopher " + (i + 1));
//            t.start();
//        }
        for (int i = 0; i < philosophers.length; i++) {
            Object leftFork = forks[i];
            Object rightFork = forks[(i + 1) % forks.length];
 
            if (i == philosophers.length - 1) {
                 
                // The last philosopher picks up the right fork first
                philosophers[i] = new Philosopher(rightFork, leftFork); 
            } else {
                philosophers[i] = new Philosopher(leftFork, rightFork);
            }
             
            Thread t 
              = new Thread(philosophers[i], "Philosopher " + (i + 1));
            t.start();
        }
    }
}


 class Philosopher implements Runnable {
	 
	private Object leftFork;
    private Object rightFork;
    final static TestAndSet check1 = new TestAndSet();
    public Philosopher(Object leftFork, Object rightFork) {
        this.leftFork = leftFork;
        this.rightFork = rightFork;
    }
	   // Member variables, methods defined earlier
	private void doAction(String action) throws InterruptedException {
        System.out.println(
          Thread.currentThread().getName() + " " + action);
        Thread.sleep(((int) (Math.random() * 100)));
    }
	    @Override
	    public void run() {
	        try {
	            while (true) {
	                // thinking
	                doAction(System.nanoTime() + ": Thinking");
//	                while(check1.leftFork.getAndSet(true));//neu dua trai dang duoc dung thi ngoi doi
	                while(true) {
	                while(check1.getAndSet1(true));
//	                	while(check1.leftFork.getAndSet(true));
//	                synchronized (leftFork) {
	                    doAction(
	                      System.nanoTime() 
	                        + ": Picked up left fork");
//	                    while(check1.rightFork.getAndSet(true));//neu dua phai dang duoc dung thi ngoi doi
	                    if(check1.rightFork==true)
//	                    if(check1.rightFork.get()==true)
	                    {
	                    	check1.leftFork=false;//neu khong nhat duoc dua 2 thi tra lai dua 1 va bat dau
//	                    	check1.leftFork.set(false);
	                    	//lai vong lap luon
	                    	continue;
	                    }
//	                    while(check1.rightFork.getAndSet(true));
	                    while(check1.getAndSet2(true));
//	                    synchronized (rightFork) {
	                        // eating
	                        doAction(
	                          System.nanoTime() 
	                            + ": Picked up right fork - eating"); 
//	                        check1.rightFork.set(false);
	                        check1.setRight(false);
	                        doAction(
	                          System.nanoTime() 
	                            + ": Put down right fork");
//	                    }
//	                        check1.leftFork.set(false);
	                        check1.setLeft(false);
		                     
	                    // Back to thinking
	                    doAction(
	                      System.nanoTime() 
	                        + ": Put down left fork. Back to thinking");
	                }
//	            }
	            }
	        } catch (InterruptedException e) {
	            Thread.currentThread().interrupt();
	            return;
	        }
	    }
	}
 class TestAndSet{
	 public  static boolean leftFork = false; //triet gia dau tien se lay duoc dua trai canh ong ta
	 public  static boolean rightFork = false;
	 // bien lock cung chi dung mot lan
	 public synchronized static boolean getAndSet1(boolean newValue) {
		 boolean prior = leftFork;//gia tri truoc do cua lock
		 leftFork = true;// lock gan bang tru
		 return prior;
	 }
	 public synchronized static void setLeft(boolean v) {
		 leftFork = v;
	 }
	 public synchronized static void setRight(boolean v) {
		 rightFork = v;
	 }
	 public synchronized static boolean getAndSet2(boolean newValue) {
		 boolean prior = rightFork;//gia tri truoc do cua lock
		 rightFork = true;// lock gan bang tru
		 return prior;
	 }
//	 public final AtomicBoolean leftFork = new AtomicBoolean(false);
//	 public final AtomicBoolean rightFork = new AtomicBoolean(false);
 }

